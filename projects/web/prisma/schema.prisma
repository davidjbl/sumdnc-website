// AIDEV-NOTE: Prisma schema for Sumdnc.com database
// This schema defines the core data models for user management, content, and sessions

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// AIDEV-NOTE: User model with authentication support
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials-based auth
  role          Role      @default(USER)

  accounts      Account[]
  sessions      Session[]
  posts         Post[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([email])
}

// AIDEV-NOTE: OAuth account model for NextAuth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

// AIDEV-NOTE: Session model for NextAuth.js
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// AIDEV-NOTE: Verification token model for NextAuth.js
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// AIDEV-NOTE: Post model for content management
model Post {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String?  @db.Text
  excerpt     String?
  published   Boolean  @default(false)
  authorId    String

  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tags        Tag[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?

  @@index([authorId])
  @@index([slug])
  @@index([published])
}

// AIDEV-NOTE: Tag model for content categorization
model Tag {
  id    String @id @default(cuid())
  name  String @unique
  slug  String @unique
  posts Post[]

  @@index([slug])
}

// AIDEV-NOTE: User role enum
enum Role {
  USER
  ADMIN
  MODERATOR
}
